{"ast":null,"code":"function ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\n/**\r\n * @typedef {Object} StateDefinitions\r\n * @property {{[event: string]: { target: string; actions?: Array<string> }}} [on]\r\n */\n\n/**\r\n * @typedef {Object} Options\r\n * @property {{[state: string]: StateDefinitions}} states\r\n * @property {object} context;\r\n * @property {string} initial\r\n */\n\n/**\r\n * @typedef {Object} Implementation\r\n * @property {{[actionName: string]: (ctx: object, event: any) => object}} actions\r\n */\n\n/**\r\n * A simplified `createMachine` from `@xstate/fsm` with the following differences:\r\n *\r\n *  - the returned machine is technically a \"service\". No `interpret(machine).start()` is needed.\r\n *  - the state definition only support `on` and target must be declared with { target: 'nextState', actions: [] } explicitly.\r\n *  - event passed to `send` must be an object with `type` property.\r\n *  - actions implementation will be [assign action](https://xstate.js.org/docs/guides/context.html#assign-action) if you return any value.\r\n *  Do not return anything if you just want to invoke side effect.\r\n *\r\n * The goal of this custom function is to avoid installing the entire `'xstate/fsm'` package, while enabling modeling using\r\n * state machine. You can copy the first parameter into the editor at https://stately.ai/viz to visualize the state machine.\r\n *\r\n * @param {Options} options\r\n * @param {Implementation} implementation\r\n */\nfunction createMachine(_ref, _ref2) {\n  var states = _ref.states,\n    context = _ref.context,\n    initial = _ref.initial;\n  var actions = _ref2.actions;\n  var currentState = initial;\n  var currentContext = context;\n  return {\n    send: function send(event) {\n      var currentStateOn = states[currentState].on;\n      var transitionConfig = currentStateOn && currentStateOn[event.type];\n      if (transitionConfig) {\n        currentState = transitionConfig.target;\n        if (transitionConfig.actions) {\n          transitionConfig.actions.forEach(function (actName) {\n            var actionImpl = actions[actName];\n            var nextContextValue = actionImpl && actionImpl(currentContext, event);\n            if (nextContextValue) {\n              currentContext = _objectSpread(_objectSpread({}, currentContext), nextContextValue);\n            }\n          });\n        }\n      }\n    }\n  };\n}\nexport default createMachine;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}